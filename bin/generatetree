#!/bin/bash

## This script takes as its input a file containing a list of 3Krice cultivars
## that have been input into the generatevcf script. This script merges the
## chromosomes in parallel, strips any sites that don't have SNPs, and
## concatenates them into a new VCF containing only the sites with SNPs. A
## subset of these SNPs are chosen at random and used as an alignment from which
## a maximum-likelihood tree is generated.

shopt -s extglob

# help menu
function usage() {
        echo "
                Code4Rice3K Help Section:
                =========================

                Usage: $0 -l <listofcultivars> -o <path> -m <mode> --nct <cpu_threads> --nt <data_threads>
                Example: $0 -l mylist -o /usr/home/ -m pwd --nct 12 --nt 12
                
                1) Mandatory options:
                -l|--list <textfile>	       	 :       List containing the names of all cultivars to be inferred
		-o|--outputdir <string>	         :	 Directory path for all output files
                -m|--mode <string>               :       Either "pwd" if run locally, or "hpc" if run on HPC computer

                2) Optional setings:
		--nct <int>       		 :       The number of CPU threads used by GATK (4-12 is recommended)
                --nt <int>      		 :       The number of data threads used by GATK (6-24 is recommended)
                --startfromstep <string>   	 :       Indicate the starting step, must be between step1-step4 (see below) 
                --stopatstep <string>      	 :       Indicate the last step, must be between step1-step4 (see below)
                --runonlystep <string>     	 :       Indicate a single step to run, e.g. step1 or step3 (see below)

                -h|--help                     	 :       Disply this help message

                code4Rice3K workflow can be run entirely or only part of the workflow can run.
                Below are the possible steps that can chosen for the "generatetree" script:

                step 1 merges each chromosome of every given cultivar 
                step 2 generates VCF file for the merged chromosomes, ATTN: To skip to this step, previous steps must have run successfully
                step 3 generates FASTA file, ATTN: To skip to this step, previous steps must have run successfully
                step 4 generates alignment file, ATTN: To skip to this step, previous steps must have run successfully
        "
}

if [ -z "$*" ]; then usage ; exit 1 ; fi

declare -a steps2run
stepstorun=(step1 step2 step3 step4)
startfromstep=""
stopatstep=""
runonlystep=""

# Default option settings:
outputdir="$pwd"
configfile=""

OPTIONS=`getopt -o l:o:m:h --long list:,outputdir:,mode:,numproc:,numdata:,startfromstep,stopatstep:,runonlystep:,help -n 'code4Rice3K error' -- "$@"`
if [ $? !+ 0 ] ; then echo " " ; echo "Could not parse options (see above) ..." >&2 ; usage ; exit 1 ; fi

eval set -- "$OPTIONS"

while true ; do
        case "$1" in
                -l|--list)
			case "$2" in
				-*) echo "Please provide a valid list with cultivar names when using -l"; usage; exit 1 ;;
				*) inputfile=$2 ; filename=${inputfile##*/} ; cultivarlist=$(cat $inputfile) ; shift 2 ;;
			esac ;;

		-o|--outputdir)
			case "$2" in
				-*) echo "Please designate an output path option when using -o"; usage; exit 1 ;;
				*) outputdir=$2 ; shift ;;
			esac ;;

                -m|--mode)
			case "$2" in
				-*) echo "Please provide a valid mode option to -m"; usage; exit 1 ;; 
                        	*) if [[ $2 == hpc ]]; then
                                	root="$PBS_O_WORKDIR"
                                	echo "root=$root"
                                	cd $root
                                	source $root/bin/environment.sh
                                	echo "Loading modules"
                                	. /etc/profile.d/modules.sh >/dev/null 2>&1
                                	module load samtools java tabix bcftools vcftools/0.1.13 python >/dev/null 2>&1
                        	elif [[ $2 == pwd ]]; then
                                	root="$(pwd)"
                                	echo "root=$root"
                                	cd $root
                                	source $root/bin/environment.sh
                        	else
                                	echo "Please provide a valid mode option to -m"; usage; exit 1
                        	fi ;;
			esac ;;

                --nct)
			case "$2" in
				-*) echo "Please provide a valid integer for the number of cpu threads when using --nct"; usage; exit 1 ;;
                        	*) nct=$2 ; shift 2 ;;
			esac ;;

                --nt)
			case "$2" in 
				-*) echo " please provide a valid integer for the number of data threads when using --nt"; usage; exit 1 ;;
                        	*) nt=$2 ; shift 2 ;;
			esac ;;

                --startfromstep)
			case "$2" in
				-*) echo "Please designate the code4Rice3K step from which to start"; usage; exit 1 ;;
                        	*) startfromstep=$2 ; shift 2 ;;
			esac ;;

                --stopatstep)
			case "$2" in
				-*) echo "Please designate the last code4Rice3K step to execute"; usage; exit 1 ;;
				*) stopatstep=$2 ; shift 2 ;;
			esac ;;

                --runonlystep)
			case "$2" in
				-*) echo "Please designate the code4Rice3K step to execute"; usage; exit 1 ;;
                        	*) runonlystep=$2 ; shift 2 ;;
			esac ;;

                h|--help)
                        usage; exit 1 ;;

		--) shift ; break ;;

		*) echo "Unknown option or error" ; usage; exit 1 ;;
        esac
done

runstep1=0
runstep2=0
runstep3=0
runstep4=0

for step in ${steps2run[@]} ; do
  if [[ $step == "step1" ]] ; then runstep1=1 ; fi
  if [[ $step == "step2" ]] ; then runstep2=1 ; fi
  if [[ $step == "step3" ]] ; then runstep3=1 ; fi
  if [[ $step == "step4" ]] ; then runstep4=1 ; fi
done

# Once all of the cultivars are cleaned and split, the chromosomes can be merged by vcf-merge.
# "bcftools merge" is supposed to be faster, but seems to have a problem with something in the format of these files.
# The merge function includes filters to remove any sites that don't have at least one alternate allele and one match to the reference, 
# as well as any "Multiple Nucleotide Polymorphism" sites.

# Step 1
if [[ runstep1 == 1 ]]; then
        echo ""
        echo "=============================================================================="
        echo "Step 1 Merging chromosomes ..."
        echo "=============================================================================="
        echo ""

	cd $split
	for chromosome in {chr01,chr02,chr03,chr04,chr05,chr06,chr07,chr08,chr09,chr10,chr11,chr12}; do
		merge_chromosome $chromosome &
	done
fi
wait

# Step 2
if [[ runstep2 == 1 ]]; then
        echo ""
        echo "=============================================================================="
        echo "Step 2 Assemble a VCF file containing all called SNPs ..."
        echo "=============================================================================="
        echo ""

	# After the chromosomes have been individually merged and cleaned, they can be reassembled into one VCF file containing 
	# all the sites that were called in all the input cultivars and contain at least one SNP.
	cd $merges
	vcf-concat chr*.cleaned.vcf.gz > ${filename%.*}.merge.cleaned.vcf
	
	# In order to make trees, random sites from the VCF are selected and turned into a FASTA alignment.
	# First the random sites are turned into a smaller VCF
	randomsubsetvcf ${filename%.*}.merge.cleaned.vcf 100000 > ../alignments/${filename%.*}.100000SNPs.vcf
fi

# Step 3
if [[ runstep3 == 1 ]]; then
        echo ""
        echo "=============================================================================="
        echo "Step 3 Generating FASTA file for alignment ..."
        echo "=============================================================================="
        echo ""

	cd $alignments
	# Then the VCF is turned into a fasta file with a python script.
	python ../bin/snp2seq.py ${filename%.*}.100000SNPs.vcf
fi

# Step 4
if [[ runstep4 == 1 ]]; then
        echo ""
        echo "=============================================================================="
        echo "Step 4 Generating alignment ..."
        echo "=============================================================================="
        echo ""

	fasta="${alignments}/${filename%.*}.100000SNPs.vcf.fasta"
	rm -f RAxML_${filename%.*}.ERROR
	rm -f RAxML_${filename%.*}.log
	rm -f RAxML*${filename%.*}*

	## Model ASC_GTRGAMMA must be used to correct for the fact that we're only using SNPs

	# -f d means rapid hill-climbing algorithm
	#raxmlHPC -f d -m ASC_GTRGAMMA --asc-corr=lewis -n ${fasta%%.vcf.fasta} -p 12345 -s ${fasta} 2>&1 > RAxML_${fasta%%.vcf.fasta}.log || touch RAxML_${fasta%%.vcf.fasta}.ERROR

	# Version for Karst/Carbonate. PTHREADS version w/ 12 threads. This REQUIRES at least 12 processors.
	raxmlHPC-PTHREADS -T 12 --no-bfgs -f a -m ASC_GTRGAMMA -n ${filename%.*} -N 1000 -p 12345 -s ${fasta} -x 12345 2>&1 > RAxML_${filename%.*}.log || raxmlHPC-PTHREADS --asc-corr=lewis -T 12 --no-bfgs -f a -m ASC_GTRGAMMA -n ${filename%.*} -N 1000 -p 12345 -s ${fasta} -x 12345 2>&1 > RAxML_${filename%.*}.log || touch RAxML_${filename%.*}.ERROR
fi

# -f a means bootstrap analysis and bestTree in one run.
#raxmlHPC -f a -m ASC_GTRGAMMA --asc-corr=lewis -n ${fasta%%.vcf.fasta} -N 100 -p 12345 -s ${fasta} -x 12345 2>&1 > RAxML_${fasta%%.vcf.fasta}.log || touch RAxML_${fasta%%.vcf.fasta}.ERROR

# This can go a lot faster with openmpi
#mpirun -n 6 raxmlHPC-MPI-AVX -f a -m ASC_GTRGAMMA --asc-corr=lewis -n ${fasta%%.vcf.fasta} -N 1000 -p 12345 -s ${fasta} -x 12345 2>&1 > RAxML_${fasta%%.vcf.fasta}.log || touch RAxML_${fasta%%.vcf.fasta}.ERROR

echo "Finished"

exit
