#!/bin/bash

## This script takes as its input a file containing a list of 3Krice cultivars
## that have been input into the generatevcf script. This script merges the
## chromosomes in parallel, strips any sites that don't have SNPs, and
## concatenates them into a new VCF containing only the sites with SNPs. A
## subset of these SNPs are chosen at random and used as an alignment from which
## a maximum-likelihood tree is generated.

shopt -s extglob

# Set the install directory (the below assumes that the code4Rice3K scripts
# are in the same directory as the code4Rice3K.conf file):
#
installdir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
configfile=${installdir}/code4Rice3K.conf
workingdir="$( pwd )"
outputdir=${workingdir}


# Default option settings:
#
nthreads=2


# Setting up which steps in the workflow to run (Default: all)
#
declare -a steps2run
steps2run=(step1 step2 step3 step4)
startfromstep=""
stopatstep=""
runonlystep=""



# Help menu:
function usage() {
        echo "
                Code4Rice3K Help Section:
                =========================

                Usage: $0 -c <configfile> -i <listofcultivars> -o <path>
                Example: $0 -c ~/Home/MyFiles/myconfigfile.conf -i mylist.txt -o myoutput -n 12
                
                1) Mandatory options:
                -i|--inputlist <textfile>	 :       List containing the names of all cultivars to be inferred

                2) Optional setings:
		-c|--configfile <path>		 :	 Configuration file for the code4Rice3K workflow
		-o|--outputdir <string>	         :	 Directory path for the output files
		-n|--nthreads			 :       number of threads to use for raxml
                --startfromstep <string>   	 :       Indicate the starting step, must be between step1-step4 (see below) 
                --stopatstep <string>      	 :       Indicate the last step, must be between step1-step4 (see below)
                --runonlystep <string>     	 :       Indicate a single step to run, e.g. step1 or step3 (see below)

                -h|--help                     	 :       Disply this help message

                code4Rice3K workflow can be run entirely or only part of the workflow can run.
                Below are the possible steps that can chosen for the "generatetree" script:

                step 1 merges each chromosome of every given cultivar 
                step 2 generates VCF file for the merged chromosomes, ATTN: To skip to this step, previous steps must have run successfully
                step 3 generates FASTA file, ATTN: To skip to this step, previous steps must have run successfully
                step 4 generates alignment file, ATTN: To skip to this step, previous steps must have run successfully
        "
}

if [ -z "$*" ]; then usage ; exit 1 ; fi


function readconfigfile {
if [ ! -e "$1" ] ; then
        echo ""
        echo "Fatal error: code4Rice3K config file $1 does not exist. Please check"
        exit 1
fi
raxmlOptions=`grep '^raxmlOptions=' "$1" | awk -F"=" '{$1=""; print $0}'`
}


function merge_chromosome() {
	chromosome=$1
	shift
	cultivarlist=("${@}")
	cultivarlist=("${cultivarlist[@]/%/.${chromosome}.*.vcf.gz}")
	echo "Now running: vcf-merge ${cultivarlist[@]} > ../mergedchromosomefiles/${chromosome}.merge.vcf"
	vcf-merge ${cultivarlist[@]} > ../mergedchromosomefiles/${chromosome}.merge.vcf
        # The awk command filters any Multiple Nucleotide Polymorphisms, and any sites that for some reason  are called as '<NON_REF>'
        < ../mergedchromosomefiles/${chromosome}.merge.vcf bcftools view --exclude-uncalled --exclude-types 'indels' --min-ac 2 --max-af 0.99 --genotype ^miss -O v | awk ' /^#/ {print} length($4) == 1 && ( ($5 != "<NON_REF>") || ($0 !~ /1\/1/) ) && ( ($5 !~ /^[ACGT],<NON_REF>/) || ($0 !~ /2\/2/) ) && ( ($5 !~ /^[ATCG],[ATCG],<NON_REF>/) || ($0 !~ /3\/3/) ) && ( ($5 !~ /^[ACGT],[ATCG],[ATCG],<NON_REF>/) || ($0 !~ /4\/4/) ) {print} ' > ../mergedchromosomefiles/${chromosome}.merge.cleaned.vcf
        bgzip ../mergedchromosomefiles/${chromosome}.merge.cleaned.vcf
        tabix ../mergedchromosomefiles/${chromosome}.merge.cleaned.vcf.gz
}

function randomsubsetvcf() {
        # Takes a vcf file and an integer, outputs to stdout a VCF with $2 random sites from the original
        file=$1
        lines=$2

        header_line_number=$(grep --line-number "^#CHROM" ${file} | cut -d":" -f1)
        let vcf_line_number=$header_line_number+1

        # The header region of the VCF file needs to be preserved
        head -n "${header_line_number}" ${file}
        # The 1000 random lines should only come from legitimate sites
        shuf -n $lines <(tail --lines=+${vcf_line_number} ${file})
}



cd $workingdir


##### Process command line arguments: #####
#

OPTIONS=`getopt -o c:i:o:n:h --long configfile:,inputlist:,outputdir:,nthreads:,startfromstep:,stopatstep:,runonlystep:,help -n 'code4Rice3K error' -- "$@"`
if [ $? != 0 ] ; then echo " " ; echo "Could not parse options (see above) ..." >&2 ; usage ; exit 1 ; fi

eval set -- "$OPTIONS"

while true ; do
        case "$1" in
		-c|--configfile)
			case "$2" in
				-*) echo "Please load code4Rice3K configuation file"; usage; exit ;;
				*) configfile=$2; shift 2 ;;
			esac ;;

                -i|--inputlist)
			case "$2" in
				-*) echo "Please provide a valid list with cultivar names when using -i"; usage; exit 1 ;;
				*) inputfile=$2 ; filename=${inputfile##*/} ; readarray -t cultivarlist < $inputfile ; shift 2 ;;
			esac ;;

		-o|--outputdir)
			case "$2" in
				-*) echo "Please designate an output path option when using -o"; usage; exit 1 ;;
				*) outputdir=$2 ; shift 2 ;;
			esac ;;

                -n|--nthreads)
			case "$2" in
				-*) echo "Please specify the number of threads to use with the -n option"; usage; exit 1 ;;
                        	*) nthreads=$2 ; shift 2 ;;
			esac ;;

                --startfromstep)
			case "$2" in
				-*) echo "Please designate the code4Rice3K step from which to start"; usage; exit 1 ;;
                        	*) startfromstep=$2 ; shift 2 ;;
			esac ;;

                --stopatstep)
			case "$2" in
				-*) echo "Please designate the last code4Rice3K step to execute"; usage; exit 1 ;;
				*) stopatstep=$2 ; shift 2 ;;
			esac ;;

                --runonlystep)
			case "$2" in
				-*) echo "Please designate the code4Rice3K step to execute"; usage; exit 1 ;;
                        	*) runonlystep=$2 ; shift 2 ;;
			esac ;;

                h|--help)
                        usage; exit 1 ;;

		--) shift ; break ;;

		*) echo "Unknown option or error" ; usage; exit 1 ;;
        esac
done


readconfigfile $configfile

# Control which step to run:
if [[ $startfromstep != '' ]] ; then
	i=-1
	for step in ${steps2run[@]} ; do
		((++i))
		if [[ $step != $startfromstep ]] ; then unset steps2run[$i] ; else break ; fi
	done
fi

unsetflag=0
if [[ $stopatstep != '' ]] ; then
	for step in ${steps2run[@]} ; do
		((++i))
		if [[ $step == $stopatstep ]] ; then unsetflag=1 ; ((--i))
		else  if [[ $unsetflag == 1 ]] ; then unset steps2run[$i] ; fi ; fi
	done
fi

if [[ $runonlystep != '' ]] ; then
	steps2run=($runonlystep)
fi


# Step 0
#
echo ""
echo "=============================================================================="
echo " Setting up workflow ..."
echo "=============================================================================="
echo ""

runstep1=0
runstep2=0
runstep3=0
runstep4=0
for step in ${steps2run[@]} ; do
	if [[ $step == "step1" ]] ; then runstep1=1 ; fi
	if [[ $step == "step2" ]] ; then runstep2=1 ; fi
	if [[ $step == "step3" ]] ; then runstep3=1 ; fi
	if [[ $step == "step4" ]] ; then runstep4=1 ; fi
done

if [ ! -d "${outputdir}/splitchromosomefiles" ] ; then
        echo ""
        echo "Fatal error: Output directory ${outputdir}/splitchromosomefiles not found."
        echo "             generatetree relies on generatevcf-procuded output in that directory."
        echo "             Please check."
        exit 1 
fi

cd $outputdir
mkdir -p mergedchromosomefiles alignmentfiles

# Once all of the cultivars are cleaned and split, the chromosomes can be merged by vcf-merge.
# "bcftools merge" is supposed to be faster, but seems to have a problem with something in the format of these files.
# The merge function includes filters to remove any sites that don't have at least one alternate allele and one match to the reference, 
# as well as any "Multiple Nucleotide Polymorphism" sites.


# Step 1
if [[ $runstep1 == 1 ]]; then
        echo ""
        echo "=============================================================================="
        echo "Step 1 Merging chromosomes ..."
        echo "=============================================================================="
        echo ""

	cd ${workingdir}
	cd ${outputdir}/splitchromosomefiles
	for chromosome in {chr01,chr02,chr03,chr04,chr05,chr06,chr07,chr08,chr09,chr10,chr11,chr12}; do
		echo "Now running: merge_chromosome $chromosome ${cultivarlist[@]}"
		merge_chromosome $chromosome ${cultivarlist[@]} &
	done
	echo "Finished merging individual chromosome data."
	echo "" 
fi
wait

# Step 2
if [[ $runstep2 == 1 ]]; then
	echo ""
        echo "=============================================================================="
        echo "Step 2 Assemble a VCF file containing all called SNPs ..."
        echo "=============================================================================="
        echo ""

	# After the chromosomes have been individually merged and cleaned, they can be reassembled into one VCF file containing 
	# all the sites that were called in all the input cultivars and contain at least one SNP.
	cd ${workingdir}
	cd ${outputdir}/mergedchromosomefiles
	vcf-concat chr*.merge.cleaned.vcf.gz > ${filename%.*}.merge.cleaned.vcf
	
	# In order to make trees, random sites from the VCF are selected and turned into a FASTA alignment.
	# First the random sites are turned into a smaller VCF
	randomsubsetvcf ${filename%.*}.merge.cleaned.vcf 100000 > ../alignmentfiles/${filename%.*}.100000SNPs.vcf
	echo "Merged file created"
	echo ""
fi

# Step 3
if [[ $runstep3 == 1 ]]; then
        echo ""
        echo "=============================================================================="
        echo "Step 3 Generating FASTA file for alignment ..."
        echo "=============================================================================="
        echo ""

	cd $workingdir
	cd ${outputdir}/alignmentfiles
	# Then the VCF is turned into a fasta file with a python script.
	python ${installdir}/snp2seq.py ${filename%.*}.100000SNPs.vcf
	echo "Fasta file created"
	echo ""
fi

# Step 4
if [[ $runstep4 == 1 ]]; then
        echo ""
        echo "=============================================================================="
        echo "Step 4 Generating alignment ..."
        echo "=============================================================================="
        echo ""
	
	cd $workingdir
	cd ${outputdir}/alignmentfiles
	fasta="${filename%.*}.100000SNPs.vcf.fasta"
	rm -f RAxML_${filename%.*}.ERROR
	rm -f RAxML_${filename%.*}.log
	rm -f RAxML*${filename%.*}*

	## Model ASC_GTRGAMMA must be used to correct for the fact that we're only using SNPs

	# -f d means rapid hill-climbing algorithm
	#raxmlHPC -f d -m ASC_GTRGAMMA --asc-corr=lewis -n ${fasta%%.vcf.fasta} -p 12345 -s ${fasta} 2>&1 > RAxML_${fasta%%.vcf.fasta}.log || touch RAxML_${fasta%%.vcf.fasta}.ERROR

	# Version for Karst/Carbonate. PTHREADS version w/ 12 threads. This REQUIRES at least 12 processors.
	raxmlHPC-PTHREADS -T $nthreads ${raxmlOptions} -n ${filename%.*} -s ${fasta} 2>&1 > RAxML_${filename%.*}.log || touch RAxML_${filename%.*}.ERROR
	echo "RAxML alignment file created"
	echo ""
fi

# This can go a lot faster with openmpi
#mpirun -n 6 raxmlHPC-MPI-AVX -f a -m ASC_GTRGAMMA --asc-corr=lewis -n ${fasta%%.vcf.fasta} -N 1000 -p 12345 -s ${fasta} -x 12345 2>&1 > RAxML_${fasta%%.vcf.fasta}.log || touch RAxML_${fasta%%.vcf.fasta}.ERROR

echo ""
echo "=============================================================================="
echo " Finished generating files"
echo "=============================================================================="
echo ""

exit
