#!/bin/bash
set -euo pipefail
## This script takes as its input argument the accession of a cultivar from the
## 3K Rice Genome project and produces a VCF file containing all of the called
## sites from that cultivar. It also produces VCF files for each chromosome of
## the cultivar, with indels, Multiple Nucleotide Polymorphisms, and uncalled or
## heterozygous sites removed.

function usage() {
	echo "
		Code4Rice3K Help Section:
		=========================

		Usage: $0 -f <cultivar> -r <path> -c <cpu_threads> -n <data_threads> -s <start_from_step> -t <stop_at_step> -o <run_only_step>
		Example: $0 -f sample-1 -r pwd -c 12 -n 12
		
		Mandatory options:
		-f <cultivar>		:	[string] the name of the chosen rice cultivar
		-r <path>		:	[string] either "pwd" if run locally, or "hpc" if run on HPC computer
		-c <cpu_threads>	:	[int] the number of CPU threads used by GATK (4-12 is recommended)
		-n <data_threads>	:	[int] the number of data threads used by GATK (6-24 is recommended)

		* Optional setings:
		-s <start_from_step>	:	[int] the number of the starting step, must be between 1-4 (see below) 
		-t <stop_at_step>	:	[int] the number of the last step, must be between 1-4 (see below)
		-o <run_only_step>	:	[int] the number of the step to run (see below)

		-h			:	disply this help message

		code4Rice3K workflow can be run entirely or only part of the workflow can run.
		Below are the possible steps that can chosen for the "generatevcf" script:

		step 1 downloading the .bam file
		step 2 generating .gvcf file .bam, ATTN: To skip to this step, previous steps must have run successfully
		step 3 generating .vcf file from .gvcf, ATTN: To skip to this step, previous steps must have run successfully
		step 4 generate .vcf file for each chromosome, ATTN: To skip to this step, previous steps must have run successfully
	"
}

if [ -z "$*" ]; then usage ; exit 1 ; fi

declare -a stepsToRun
stepsToRun=(step1 step2 step3 step4)
startFromStep=""
stopAtStep=""
runOnlyStep=""

runStep1=0
runStep2=0
runStep3=0
runStep4=0

for step in ${stepsToRun[@]} ; do
  if [[ $step == "step1" ]] ; then runStep1=1 ; fi
  if [[ $step == "step2" ]] ; then runStep2=1 ; fi
  if [[ $step == "step3" ]] ; then runStep3=1 ; fi
  if [[ $step == "step4" ]] ; then runStep4=1 ; fi
done

# Check if the user specified that this is a High Performance Computing environment
while getopts "f:r:c:n:s:t:o:h" opt; do
	case $opt in
		f)
			cultivar=${OPTARG}
			echo "Processing ${cultivar}"
			;;
		r)
			if [[ $OPTARG == hpc ]]; then
				root="$PBS_O_WORKDIR"
				echo "root=$root"
				cd $root
				source $root/bin/environment.sh
				echo "Loading modules"
				. /etc/profile.d/modules.sh >/dev/null 2>&1
				module load samtools java tabix bcftools vcftools/0.1.13 python >/dev/null 2>&1
			elif [[ $OPTARG == pwd ]]; then
				root="$(pwd)"
				echo "root=$root"
				cd $root
				source $root/bin/environment.sh
			else
				echo "Need to specify path: pwd or hpc"
			fi
			;;
		c)
			nct=${OPTARG} ;;
		n)
			nt=${OPTARG} ;;
		s)
			startFromStep=${OPTARG} ;;
		t)
			stopAtStep=${OPTARG} ;;
		o)
			runOnlyStep=${OPTARG} ;;
		/?|*|h)
			usage; exit 1 ;;
	esac
done

if [[ $startFromStep != "" ]] ; then
	i=-1
		for step in ${stepsToRun[@]} ; do
			((++i))
			if [[ $step != $startFromStep ]] ; then unset stepsToRun[$i] ; else break ; fi
		done
fi

unsetflag=0
if [[ $stopAtStep != "" ]] ; then
	for step in ${stepsToRun[@]} ; do
		((++i))
		if [[ $step == $stopAtStep ]] ; then unsetflag=1 ; ((--i))
		else  if [[ $unsetflag == 1 ]] ; then unset stepsToRun[$i] ; fi ;  fi
	done
fi

if [[ $runOnlyStep != "" ]] ; then
	stepsToRun=($runOnlyStep)
fi


cd $root
source $root/bin/environment.sh 

#Step 1
if [[ runStep1 == 1 ]]; then
	# BAM files of sequence read mapping
	# https://aws.amazon.com/public-datasets/3000-rice-genome/
	echo ""
	echo "=============================================================================="
	echo " Step 1 Downloading BAM file for $cultivar ..."
	echo "=============================================================================="
	echo ""

	cd $maps
	if [[ ! -e ${cultivar}.realigned.bam.bai ]]; then
        	wget https://s3.amazonaws.com/3kricegenome/Nipponbare/${cultivar}.realigned.bam
        	samtools index ${cultivar}.realigned.bam
	fi
	echo "BAM file downloaded"
fi

# Step 2
if [[ runStep2 == 1 ]]; then
	echo ""
	echo "=============================================================================="
	echo "Step 2 Generating GVCF file from .bam ..."
	echo "=============================================================================="
	echo ""

	# The GATK tool Haplotype Caller is used to compare the bam file with the reference genome and generate a gvcf file
	cd $calls
	call_variants $cultivar $nct
	echo "GVCF file created"
	echo ""
fi

# Step 3
if [[ runStep3 == 1 ]]; then
	echo ""
	echo "=============================================================================="
	echo "Step 3 Generating VCF file from .gvcf ..."
	echo "=============================================================================="
	echo ""
	# The GATK tool GenotypeGVCFs takes the gvcf file and produces a normal vcf.
	# The option -allSites is necessary for our purposes, so that called sites that match the reference 
	# will be able to be compared to SNPs in other cultivars.
	cd $calls
	full_genotype $cultivar $nt

	echo "VCF file created"
	echo ""
fi

# Step 4
if [[ runStep4 == 1 ]]; then
	echo ""
	echo "=============================================================================="
	echo "Step 4 Splitting and cleaning VCF files ..."
	echo "=============================================================================="
	echo ""
	# Before merging VCFs from different cultivars, it is useful to remove indels and uncalled or heterozygous sites with bcftools view.
	# It is also expedient to split the VCF by chromosome so that merges can be performed with some degree of parallelism.
	# This step is not necessary if a merge is not planned.
	cd $calls
	clean_and_split_vcf $cultivar

	echo "Splitting and cleaning is done"
	echo ""
fi
echo ""
echo "Finished generating files!"
echo ""
exit
