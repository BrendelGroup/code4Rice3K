#!/bin/bash

## This script takes as its input argument the accession of a cultivar from the
## 3K Rice Genome project and produces a VCF file containing all of the called
## sites from that cultivar. It also produces VCF files for each chromosome of
## the cultivar, with indels, Multiple Nucleotide Polymorphisms, and uncalled or
## heterozygous sites removed.

shopt -s extglob

# help menu
function usage() {
	echo "
		Code4Rice3K Help Section:
		=========================

		Usage: $0 -i <cultivar> -o <path> -m <mode> --nct <cpu_threads> --nt <data_threads>
		Example: $0 -i sample-1 -o /usr/home/ -m local --nct 4 --nt 12
		
		1) Mandatory options:
		-i|--infile <string>		:	The name of the chosen rice cultivar
		-m|--mode <string>		:	Either "local" if run locally, or "hpc" if run on HPC computer

		2) Optional setings:
		-o|--outputdir <string>		:	Directory path for all output files
		--nct <int>			:	The number of CPU threads used by GATK (4-12 is recommended)
		--nt <int>			:	The number of data threads used by GATK (6-24 is recommended)
		--startfromstep <string>	:	Indicate the starting step, must be between step1-step4 (see below) 
		--stopatstep <string>		:	Indicate the last step, must be between step1-step4 (see below)
		--runonlystep <string>		:	Indicate a single step to run, e.g. step1 or step3 (see below)

		-h|--help			:	Disply this help message

		code4Rice3K workflow can be run entirely or only part of the workflow can run.
		Below are the possible steps that can chosen for the "generatevcf" script:

		step 1 downloads the .bam file
		step 2 generates .gvcf file .bam, ATTN: To skip to this step, previous steps must have run successfully
		step 3 generates .vcf file from .gvcf, ATTN: To skip to this step, previous steps must have run successfully
		step 4 generates .vcf file for each chromosome, ATTN: To skip to this step, previous steps must have run successfully
	"
}

if [ -z "$*" ]; then usage ; exit 1 ; fi

# set variable stepsToRun as an array 
declare -a steps2run
steps2run=(step1 step2 step3 step4)
startfromstep=""
stopatstep=""
runonlystep=""

# Default option settings:
outputdir="$pwd"
#configfile=""


OPTIONS=`getopt -o i:o:m:h --long infile:,outputdir:,mode:,numproc:,numdata:,startfromstep:,stopatstep:,runonlystep:,help -n 'code4Rice3K error' -- "$@"` 
if [ $? != 0 ] ; then echo " " ; echo "Could not parse options (see above) ..." >&2 ; usage ; exit 1 ; fi

eval set -- "$OPTIONS"

while true ; do
	case "$1" in
		-i|--infile)
			case "$2" in
				-*) echo "Please provide a valid cultivar name when using -i"; usage; exit 1 ;;
				*) cultivar=$2 ; shift 2 ;;
				echo "Processing ${cultivar} ..."
			esac ;;

		-o|--outputdir)
			case "$2" in
				-*) echo "Please designate an output directory when using -o"; usage; exit 1 ;;
				*) outputdir=$2 ; shift 2 ;;
			esac ;;

		-m|--mode)
			case "$2" in
				-*) echo "Please provide a valid mode option to -m"; usage; exit 1 ;;
				*) if [[ $2 == hpc ]]; then
					root="$PBS_O_WORKDIR"
					echo "root=$root"
					echo "Loading modules"
					. /etc/profile.d/modules.sh >/dev/null 2>&1
					module load samtools java tabix bcftools vcftools/0.1.13 python >/dev/null 2>&1
				elif [[ $2 == local ]]; then
					root="$(pwd)"
					echo "root=$root"
				else
					echo "Please provide a valid mode option when using -m"; usage; exit 1
				fi ; shift 2 ;;
			esac ;;

		--nct)
			case "$2" in
				-*) echo "Please provide a valid integer for number of cpu threads when using -nct"; usage; exit 1 ;;
				*) nct=$2 ; shift 2 ;;
			esac ;;

		--nt)
			case $2 in
				-*) echo "Please provide a valid integer for number of data threads when using -nt"; usage; exit 1 ;;
				*) nt=$2 ; shift 2 ;;
			esac ;;

		--startfromstep)
			case "$2" in
				-*) echo "Please designate the code4Rice3K step from which to start"; usage; exit 1 ;;
				*) startfromstep=$2 ; shift 2 ;;
			esac ;;

		--stopatstep)
			case "$2" in
				-*) echo "Please designate the last codeRice3K step to execute"; usage; exit 1 ;;
				*) stopatstep=$2 ; shift 2 ;;
			esac ;;

		--runonlystep)
			case "$2" in
				-*) echo "Please designate the code4Rice3K step to execute"; usage; exit 1 ;;
				*) runonlystep=$2 ; shift 2 ;;
			esac ;;

		-h|--help)
			usage; exit 1 ;;

		--) shift ; break ;;

		*) echo "Unknown option or error" ; usage; exit 1 ;;
	esac
done

if [[ $startfromstep != '' ]] ; then
	i=-1
	for step in ${steps2run[@]} ; do
		((++i))
		if [[ $step != $startfromstep ]] ; then unset steps2run[$i] ; else break ; fi
	done
fi

unsetflag=0
if [[ $stopatstep != '' ]] ; then
	for step in ${steps2run[@]} ; do
		((++i))
		if [[ $step == $stopatstep ]] ; then unsetflag=1 ; ((--i))
		else  if [[ $unsetflag == 1 ]] ; then unset steps2run[$i] ; fi ; fi
	done
fi

if [[ $runonlystep != '' ]] ; then
	stepsToRun=($runonlystep)
fi 

runstep1=0
runstep2=0
runstep3=0
runstep4=0
for step in ${steps2run[@]} ; do
	if [[ $step == "step1" ]] ; then runstep1=1 ; fi
	if [[ $step == "step2" ]] ; then runstep2=1 ; fi
	if [[ $step == "step3" ]] ; then runstep3=1 ; fi
	if [[ $step == "step4" ]] ; then runstep4=1 ; fi
done

cd $root
source $root/bin/code4Rice3K.conf

#Step 1
if [ $runstep1 == 1 ] ; then
	# BAM files of sequence read mapping
	# https://aws.amazon.com/public-datasets/3000-rice-genome/
	echo ""
	echo "=============================================================================="
	echo " Step 1 Downloading BAM file for $cultivar ..."
	echo "=============================================================================="
	echo ""

	cd $bamfiles
	if [[ ! -e ${cultivar}.realigned.bam.bai ]]; then
        	wget https://s3.amazonaws.com/3kricegenome/Nipponbare/${cultivar}.realigned.bam
        	samtools index ${cultivar}.realigned.bam
	fi
	echo "BAM file downloaded"
fi

# Step 2
if [ $runstep2 == 1 ] ; then
	echo ""
	echo "=============================================================================="
	echo "Step 2 Generating GVCF file from .bam ..."
	echo "=============================================================================="
	echo ""

	# The GATK tool Haplotype Caller is used to compare the bam file with the reference genome and generate a gvcf file
	cd $gvcffiles
	call_variants $cultivar $nct
	echo "GVCF file created"
	echo ""
fi

# Step 3
if [ $runstep3 == 1 ] ; then
	echo ""
	echo "=============================================================================="
	echo "Step 3 Generating VCF file from .gvcf ..."
	echo "=============================================================================="
	echo ""
	# The GATK tool GenotypeGVCFs takes the gvcf file and produces a normal vcf.
	# The option -allSites is necessary for our purposes, so that called sites that match the reference 
	# will be able to be compared to SNPs in other cultivars.
	cd $vcffiles
	full_genotype $cultivar $nt

	echo "VCF file created"
	echo ""
fi

# Step 4
if [ $runstep4 == 1 ] ; then
	echo ""
	echo "=============================================================================="
	echo "Step 4 Splitting and cleaning VCF files ..."
	echo "=============================================================================="
	echo ""
	# Before merging VCFs from different cultivars, it is useful to remove indels and uncalled or heterozygous sites with bcftools view.
	# It is also expedient to split the VCF by chromosome so that merges can be performed with some degree of parallelism.
	# This step is not necessary if a merge is not planned.
	cd $vcffiles
	clean_and_split_vcf $cultivar

	echo "Splitting and cleaning is done"
	echo ""
fi
echo ""
echo "Finished generating files!"
echo ""
exit
