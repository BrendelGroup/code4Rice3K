#!/bin/bash
set -euo pipefail
## This script takes as its input a file containing a list of 3Krice cultivars
## that have been input into the generatevcf script. This script merges the
## chromosomes in parallel, strips any sites that don't have SNPs, and
## concatenates them into a new VCF containing only the sites with SNPs. A
## subset of these SNPs are chosen at random and used as an alignment from which
## a maximum-likelihood tree is generated.

inputfile=$1
filename=${inputfile##*/}
cultivarlist=$(cat $inputfile)

# Check if the user specified that this is a High Performance Computing environment
system_type=${2:-}
if [[ "$system_type" == "hpc" ]]; then
	# If HPC, the job will not be invoked from the same directory the script is in.
	# HPC environments should have an environmental variable that knows where the
	# original script is though.
	root="$PBS_O_WORKDIR"
	# Presumably only HPC environments will need modules loaded
	. /etc/profile.d/modules.sh >/dev/null 2>&1
	module load tabix bcftools vcftools/0.1.13 python r raxml >/dev/null 2>&1
else
	# In non-HPC environments we can just check where the script is.
	root="$(dirname "$(readlink -f "$0")")"
fi

cd $root
source $root/bin/environment.sh

# Test for presence of required software
error=""
bcftools --help >/dev/null 2>&1 || (echo "could not load bcftools" >&2 && error="true")
vcftools --help >/dev/null 2>&1 || (echo "could not load vcftools" >&2 && error="true")
python --version >/dev/null 2>&1 || (echo "could not load Python 2.7" >&2 && error="true")
#raxml -h >/dev/null 2>&1 || (echo "could not load raxml" >&2 && error="true")
# Tabix exits with error even if installed, so it needs a fancier test
set +e #Temporarily disable strict error mode
tabix -help >/dev/null 2>&1
if [[ "$?" != "1" ]]; then #If tabix is not installed the error status should be 127
	echo "could not load tabix" >&2
	error="true"
fi
set -e

if [[ $error == "true" ]]; then
	exit 1
fi

# If VCFs have not been cleaned and split, warn the user
error=""
for cultivar in $cultivarlist; do
	if [[ ! -e ${split}/${cultivar}.chr12.noindels_nohets_nomnps.vcf.gz.tbi ]]; then
		echo "You need to run generatevcf on ${cultivar}" >&2
		error="true"
	fi
done

if [[ $error == "true" ]]; then
	exit 1
fi

# Once all of the cultivars are cleaned and split, the chromosomes can be merged by vcf-merge.
# "bcftools merge" is supposed to be faster, but seems to have a problem with something in the format of these files.
# The merge function includes filters to remove any sites that don't have at least one alternate allele and one match to the reference, as well as any "Multiple Nucleotide Polymorphism" sites.
cd $split
for chromosome in {chr01,chr02,chr03,chr04,chr05,chr06,chr07,chr08,chr09,chr10,chr11,chr12}; do
	merge_chromosome $chromosome &
done

wait

# After the chromosomes have been individually merged and cleaned, they can be reassembled into one VCF file containing all the sites that were called in all the input cultivars and contain at least one SNP.
cd $merges
vcf-concat chr*.cleaned.vcf.gz > ${filename%.*}.merge.cleaned.vcf

# To look at SNPs that are present to a greater degree in the genome, a refiltering step produces additional vcf files that contain sites that have varying minimum numbers of SNPs.
#refilter_merged ${filename%.*}.merge.cleaned.vcf

# In order to make trees, random sites from the VCF are selected and turned into a FASTA alignment.
# First the random sites are turned into a smaller VCF
randomsubsetvcf ${filename%.*}.merge.cleaned.vcf 100000 > ../alignments/${filename%.*}.100000SNPs.vcf
cd $alignments
# Then the VCF is turned into a fasta file with a python script.
python ../bin/snp2seq.py ${filename%.*}.100000SNPs.vcf

cd $root
fasta="${alignments}/${filename%.*}.100000SNPs.vcf.fasta"
rm -f RAxML_${filename%.*}.ERROR
rm -f RAxML_${filename%.*}.log
rm -f RAxML*${filename%.*}*

## Model ASC_GTRGAMMA must be used to correct for the fact that we're only using SNPs

# -f d means rapid hill-climbing algorithm
#raxmlHPC -f d -m ASC_GTRGAMMA --asc-corr=lewis -n ${fasta%%.vcf.fasta} -p 12345 -s ${fasta} 2>&1 > RAxML_${fasta%%.vcf.fasta}.log || touch RAxML_${fasta%%.vcf.fasta}.ERROR

# Version for Karst/Carbonate. PTHREADS version w/ 12 threads. This REQUIRES at least 12 processors.
raxmlHPC-PTHREADS -T 12 --no-bfgs -f a -m ASC_GTRGAMMA -n ${filename%.*} -N 1000 -p 12345 -s ${fasta} -x 12345 2>&1 > RAxML_${filename%.*}.log || raxmlHPC-PTHREADS --asc-corr=lewis -T 12 --no-bfgs -f a -m ASC_GTRGAMMA -n ${filename%.*} -N 1000 -p 12345 -s ${fasta} -x 12345 2>&1 > RAxML_${filename%.*}.log || touch RAxML_${filename%.*}.ERROR

# -f a means bootstrap analysis and bestTree in one run.
#raxmlHPC -f a -m ASC_GTRGAMMA --asc-corr=lewis -n ${fasta%%.vcf.fasta} -N 100 -p 12345 -s ${fasta} -x 12345 2>&1 > RAxML_${fasta%%.vcf.fasta}.log || touch RAxML_${fasta%%.vcf.fasta}.ERROR

# This can go a lot faster with openmpi
#mpirun -n 6 raxmlHPC-MPI-AVX -f a -m ASC_GTRGAMMA --asc-corr=lewis -n ${fasta%%.vcf.fasta} -N 1000 -p 12345 -s ${fasta} -x 12345 2>&1 > RAxML_${fasta%%.vcf.fasta}.log || touch RAxML_${fasta%%.vcf.fasta}.ERROR
